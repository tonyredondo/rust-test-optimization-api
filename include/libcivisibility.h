/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 13 "civisibility_exports.go"

struct unix_time {
    unsigned long long sec;
    unsigned long long nsec;
};

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// civisibility_initialize initializes the CI visibility integration.
//
extern void civisibility_initialize(char* runtime_name, char* runtime_version, char* framework, char* framework_version, struct unix_time* unix_start_time);

// civisibility_session_set_string_tag sets a string tag on the session.
//
extern unsigned char civisibility_session_set_string_tag(char* key, char* value);

// civisibility_session_set_number_tag sets a number tag on the session.
//
extern unsigned char civisibility_session_set_number_tag(char* key, double value);

// civisibility_session_set_error sets an error on the session.
//
extern unsigned char civisibility_session_set_error(char* error_type, char* error_message, char* error_stacktrace);

// civisibility_shutdown shuts down the CI visibility integration.
//
extern void civisibility_shutdown(int exit_code, struct unix_time* unix_finish_time);

// civisibility_create_module creates a new module for the given name.
//
extern unsigned long long civisibility_create_module(char* name, char* framework, char* framework_version, struct unix_time* unix_start_time);

// civisibility_module_set_string_tag sets a string tag on the module.
//
extern unsigned char civisibility_module_set_string_tag(unsigned long long module_id, char* key, char* value);

// civisibility_module_set_number_tag sets a number tag on the module.
//
extern unsigned char civisibility_module_set_number_tag(unsigned long long module_id, char* key, double value);

// civisibility_module_set_error sets an error on the module.
//
extern unsigned char civisibility_module_set_error(unsigned long long module_id, char* error_type, char* error_message, char* error_stacktrace);

// civisibility_close_module closes the module.
//
extern unsigned char civisibility_close_module(unsigned long long module_id, struct unix_time* unix_finish_time);

// civisibility_create_test_suite creates a new test suite for the given module.
//
extern unsigned long long civisibility_create_test_suite(unsigned long long module_id, char* name, struct unix_time* unix_start_time);

// civisibility_suite_set_string_tag sets a string tag on the suite.
//
extern unsigned char civisibility_suite_set_string_tag(unsigned long long suite_id, char* key, char* value);

// civisibility_suite_set_number_tag sets a number tag on the suite.
//
extern unsigned char civisibility_suite_set_number_tag(unsigned long long suite_id, char* key, double value);

// civisibility_suite_set_error sets an error on the suite.
//
extern unsigned char civisibility_suite_set_error(unsigned long long suite_id, char* error_type, char* error_message, char* error_stacktrace);

// civisibility_close_test_suite closes the suite.
//
extern unsigned char civisibility_close_test_suite(unsigned long long suite_id, struct unix_time* unix_finish_time);

// civisibility_create_test creates a new test for the given suite.
//
extern unsigned long long civisibility_create_test(unsigned long long suite_id, char* name, struct unix_time* unix_start_time);

// civisibility_test_set_string_tag sets a string tag on the test.
//
extern unsigned char civisibility_test_set_string_tag(unsigned long long test_id, char* key, char* value);

// civisibility_test_set_number_tag sets a number tag on the test.
//
extern unsigned char civisibility_test_set_number_tag(unsigned long long test_id, char* key, double value);

// civisibility_test_set_error sets an error on the test.
//
extern unsigned char civisibility_test_set_error(unsigned long long test_id, char* error_type, char* error_message, char* error_stacktrace);

// civisibility_test_set_test_source sets the source file and line numbers for the test.
//
extern unsigned char civisibility_test_set_test_source(unsigned long long test_id, char* test_source_file, int* test_source_start_line, int* test_source_end_line);

// civisibility_close_test closes the test.
// status = 0: passed, 1: failed, 2: skipped
//
extern unsigned char civisibility_close_test(unsigned long long test_id, unsigned char status, char* skip_reason, struct unix_time* unix_finish_time);

#ifdef __cplusplus
}
#endif
